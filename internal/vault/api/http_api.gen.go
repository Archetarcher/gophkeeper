// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
	Slug    string `json:"slug"`
}

// RememberCipherCardData defines model for RememberCipherCardData.
type RememberCipherCardData struct {
	Brand          string  `json:"brand"`
	CardHolderName string  `json:"cardHolderName"`
	Code           string  `json:"code"`
	ExpMonth       string  `json:"expMonth"`
	ExpYear        string  `json:"expYear"`
	Meta           *string `json:"meta,omitempty"`
	Number         string  `json:"number"`
}

// RememberCipherCustomBinaryData defines model for RememberCipherCustomBinaryData.
type RememberCipherCustomBinaryData struct {
	Key   string  `json:"key"`
	Meta  *string `json:"meta,omitempty"`
	Value string  `json:"value"`
}

// RememberCipherCustomData defines model for RememberCipherCustomData.
type RememberCipherCustomData struct {
	Key   string  `json:"key"`
	Meta  *string `json:"meta,omitempty"`
	Value string  `json:"value"`
}

// RememberCipherLoginData defines model for RememberCipherLoginData.
type RememberCipherLoginData struct {
	Login    string  `json:"login"`
	Meta     *string `json:"meta,omitempty"`
	Password string  `json:"password"`
	Uri      string  `json:"uri"`
}

// Secret defines model for Secret.
type Secret struct {
	Data string             `json:"data"`
	Key  string             `json:"key"`
	Type string             `json:"type"`
	Uuid openapi_types.UUID `json:"uuid"`
}

// Secrets defines model for Secrets.
type Secrets struct {
	Secrets []Secret `json:"secrets"`
}

// ShowSecret defines model for ShowSecret.
type ShowSecret struct {
	Key string `json:"key"`
}

// RememberCipherCardDataJSONRequestBody defines body for RememberCipherCardData for application/json ContentType.
type RememberCipherCardDataJSONRequestBody = RememberCipherCardData

// RememberCipherCustomBinaryDataJSONRequestBody defines body for RememberCipherCustomBinaryData for application/json ContentType.
type RememberCipherCustomBinaryDataJSONRequestBody = RememberCipherCustomBinaryData

// RememberCipherCustomDataJSONRequestBody defines body for RememberCipherCustomData for application/json ContentType.
type RememberCipherCustomDataJSONRequestBody = RememberCipherCustomData

// RememberCipherLoginDataJSONRequestBody defines body for RememberCipherLoginData for application/json ContentType.
type RememberCipherLoginDataJSONRequestBody = RememberCipherLoginData

// ShowSecretJSONRequestBody defines body for ShowSecret for application/json ContentType.
type ShowSecretJSONRequestBody = ShowSecret

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RememberCipherCardDataWithBody request with any body
	RememberCipherCardDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RememberCipherCardData(ctx context.Context, body RememberCipherCardDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RememberCipherCustomBinaryDataWithBody request with any body
	RememberCipherCustomBinaryDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RememberCipherCustomBinaryData(ctx context.Context, body RememberCipherCustomBinaryDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RememberCipherCustomDataWithBody request with any body
	RememberCipherCustomDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RememberCipherCustomData(ctx context.Context, body RememberCipherCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RememberCipherLoginDataWithBody request with any body
	RememberCipherLoginDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RememberCipherLoginData(ctx context.Context, body RememberCipherLoginDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowSecretWithBody request with any body
	ShowSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShowSecret(ctx context.Context, body ShowSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShowUserSecrets request
	ShowUserSecrets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RememberCipherCardDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRememberCipherCardDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RememberCipherCardData(ctx context.Context, body RememberCipherCardDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRememberCipherCardDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RememberCipherCustomBinaryDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRememberCipherCustomBinaryDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RememberCipherCustomBinaryData(ctx context.Context, body RememberCipherCustomBinaryDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRememberCipherCustomBinaryDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RememberCipherCustomDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRememberCipherCustomDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RememberCipherCustomData(ctx context.Context, body RememberCipherCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRememberCipherCustomDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RememberCipherLoginDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRememberCipherLoginDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RememberCipherLoginData(ctx context.Context, body RememberCipherLoginDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRememberCipherLoginDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowSecretRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowSecret(ctx context.Context, body ShowSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowSecretRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShowUserSecrets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShowUserSecretsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRememberCipherCardDataRequest calls the generic RememberCipherCardData builder with application/json body
func NewRememberCipherCardDataRequest(server string, body RememberCipherCardDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRememberCipherCardDataRequestWithBody(server, "application/json", bodyReader)
}

// NewRememberCipherCardDataRequestWithBody generates requests for RememberCipherCardData with any type of body
func NewRememberCipherCardDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card-data/remember")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRememberCipherCustomBinaryDataRequest calls the generic RememberCipherCustomBinaryData builder with application/json body
func NewRememberCipherCustomBinaryDataRequest(server string, body RememberCipherCustomBinaryDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRememberCipherCustomBinaryDataRequestWithBody(server, "application/json", bodyReader)
}

// NewRememberCipherCustomBinaryDataRequestWithBody generates requests for RememberCipherCustomBinaryData with any type of body
func NewRememberCipherCustomBinaryDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/custom-binary-data/remember")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRememberCipherCustomDataRequest calls the generic RememberCipherCustomData builder with application/json body
func NewRememberCipherCustomDataRequest(server string, body RememberCipherCustomDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRememberCipherCustomDataRequestWithBody(server, "application/json", bodyReader)
}

// NewRememberCipherCustomDataRequestWithBody generates requests for RememberCipherCustomData with any type of body
func NewRememberCipherCustomDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/custom-data/remember")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRememberCipherLoginDataRequest calls the generic RememberCipherLoginData builder with application/json body
func NewRememberCipherLoginDataRequest(server string, body RememberCipherLoginDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRememberCipherLoginDataRequestWithBody(server, "application/json", bodyReader)
}

// NewRememberCipherLoginDataRequestWithBody generates requests for RememberCipherLoginData with any type of body
func NewRememberCipherLoginDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login-data/remember")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShowSecretRequest calls the generic ShowSecret builder with application/json body
func NewShowSecretRequest(server string, body ShowSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShowSecretRequestWithBody(server, "application/json", bodyReader)
}

// NewShowSecretRequestWithBody generates requests for ShowSecret with any type of body
func NewShowSecretRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShowUserSecretsRequest generates requests for ShowUserSecrets
func NewShowUserSecretsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RememberCipherCardDataWithBodyWithResponse request with any body
	RememberCipherCardDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RememberCipherCardDataResponse, error)

	RememberCipherCardDataWithResponse(ctx context.Context, body RememberCipherCardDataJSONRequestBody, reqEditors ...RequestEditorFn) (*RememberCipherCardDataResponse, error)

	// RememberCipherCustomBinaryDataWithBodyWithResponse request with any body
	RememberCipherCustomBinaryDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RememberCipherCustomBinaryDataResponse, error)

	RememberCipherCustomBinaryDataWithResponse(ctx context.Context, body RememberCipherCustomBinaryDataJSONRequestBody, reqEditors ...RequestEditorFn) (*RememberCipherCustomBinaryDataResponse, error)

	// RememberCipherCustomDataWithBodyWithResponse request with any body
	RememberCipherCustomDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RememberCipherCustomDataResponse, error)

	RememberCipherCustomDataWithResponse(ctx context.Context, body RememberCipherCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*RememberCipherCustomDataResponse, error)

	// RememberCipherLoginDataWithBodyWithResponse request with any body
	RememberCipherLoginDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RememberCipherLoginDataResponse, error)

	RememberCipherLoginDataWithResponse(ctx context.Context, body RememberCipherLoginDataJSONRequestBody, reqEditors ...RequestEditorFn) (*RememberCipherLoginDataResponse, error)

	// ShowSecretWithBodyWithResponse request with any body
	ShowSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShowSecretResponse, error)

	ShowSecretWithResponse(ctx context.Context, body ShowSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*ShowSecretResponse, error)

	// ShowUserSecretsWithResponse request
	ShowUserSecretsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ShowUserSecretsResponse, error)
}

type RememberCipherCardDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r RememberCipherCardDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RememberCipherCardDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RememberCipherCustomBinaryDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r RememberCipherCustomBinaryDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RememberCipherCustomBinaryDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RememberCipherCustomDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r RememberCipherCustomDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RememberCipherCustomDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RememberCipherLoginDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r RememberCipherLoginDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RememberCipherLoginDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ShowSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShowUserSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secrets
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ShowUserSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShowUserSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RememberCipherCardDataWithBodyWithResponse request with arbitrary body returning *RememberCipherCardDataResponse
func (c *ClientWithResponses) RememberCipherCardDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RememberCipherCardDataResponse, error) {
	rsp, err := c.RememberCipherCardDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRememberCipherCardDataResponse(rsp)
}

func (c *ClientWithResponses) RememberCipherCardDataWithResponse(ctx context.Context, body RememberCipherCardDataJSONRequestBody, reqEditors ...RequestEditorFn) (*RememberCipherCardDataResponse, error) {
	rsp, err := c.RememberCipherCardData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRememberCipherCardDataResponse(rsp)
}

// RememberCipherCustomBinaryDataWithBodyWithResponse request with arbitrary body returning *RememberCipherCustomBinaryDataResponse
func (c *ClientWithResponses) RememberCipherCustomBinaryDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RememberCipherCustomBinaryDataResponse, error) {
	rsp, err := c.RememberCipherCustomBinaryDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRememberCipherCustomBinaryDataResponse(rsp)
}

func (c *ClientWithResponses) RememberCipherCustomBinaryDataWithResponse(ctx context.Context, body RememberCipherCustomBinaryDataJSONRequestBody, reqEditors ...RequestEditorFn) (*RememberCipherCustomBinaryDataResponse, error) {
	rsp, err := c.RememberCipherCustomBinaryData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRememberCipherCustomBinaryDataResponse(rsp)
}

// RememberCipherCustomDataWithBodyWithResponse request with arbitrary body returning *RememberCipherCustomDataResponse
func (c *ClientWithResponses) RememberCipherCustomDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RememberCipherCustomDataResponse, error) {
	rsp, err := c.RememberCipherCustomDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRememberCipherCustomDataResponse(rsp)
}

func (c *ClientWithResponses) RememberCipherCustomDataWithResponse(ctx context.Context, body RememberCipherCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*RememberCipherCustomDataResponse, error) {
	rsp, err := c.RememberCipherCustomData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRememberCipherCustomDataResponse(rsp)
}

// RememberCipherLoginDataWithBodyWithResponse request with arbitrary body returning *RememberCipherLoginDataResponse
func (c *ClientWithResponses) RememberCipherLoginDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RememberCipherLoginDataResponse, error) {
	rsp, err := c.RememberCipherLoginDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRememberCipherLoginDataResponse(rsp)
}

func (c *ClientWithResponses) RememberCipherLoginDataWithResponse(ctx context.Context, body RememberCipherLoginDataJSONRequestBody, reqEditors ...RequestEditorFn) (*RememberCipherLoginDataResponse, error) {
	rsp, err := c.RememberCipherLoginData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRememberCipherLoginDataResponse(rsp)
}

// ShowSecretWithBodyWithResponse request with arbitrary body returning *ShowSecretResponse
func (c *ClientWithResponses) ShowSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShowSecretResponse, error) {
	rsp, err := c.ShowSecretWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShowSecretResponse(rsp)
}

func (c *ClientWithResponses) ShowSecretWithResponse(ctx context.Context, body ShowSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*ShowSecretResponse, error) {
	rsp, err := c.ShowSecret(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShowSecretResponse(rsp)
}

// ShowUserSecretsWithResponse request returning *ShowUserSecretsResponse
func (c *ClientWithResponses) ShowUserSecretsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ShowUserSecretsResponse, error) {
	rsp, err := c.ShowUserSecrets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShowUserSecretsResponse(rsp)
}

// ParseRememberCipherCardDataResponse parses an HTTP response from a RememberCipherCardDataWithResponse call
func ParseRememberCipherCardDataResponse(rsp *http.Response) (*RememberCipherCardDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RememberCipherCardDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRememberCipherCustomBinaryDataResponse parses an HTTP response from a RememberCipherCustomBinaryDataWithResponse call
func ParseRememberCipherCustomBinaryDataResponse(rsp *http.Response) (*RememberCipherCustomBinaryDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RememberCipherCustomBinaryDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRememberCipherCustomDataResponse parses an HTTP response from a RememberCipherCustomDataWithResponse call
func ParseRememberCipherCustomDataResponse(rsp *http.Response) (*RememberCipherCustomDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RememberCipherCustomDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRememberCipherLoginDataResponse parses an HTTP response from a RememberCipherLoginDataWithResponse call
func ParseRememberCipherLoginDataResponse(rsp *http.Response) (*RememberCipherLoginDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RememberCipherLoginDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseShowSecretResponse parses an HTTP response from a ShowSecretWithResponse call
func ParseShowSecretResponse(rsp *http.Response) (*ShowSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShowSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseShowUserSecretsResponse parses an HTTP response from a ShowUserSecretsWithResponse call
func ParseShowUserSecretsResponse(rsp *http.Response) (*ShowUserSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShowUserSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /card-data/remember)
	RememberCipherCardData(w http.ResponseWriter, r *http.Request)

	// (POST /custom-binary-data/remember)
	RememberCipherCustomBinaryData(w http.ResponseWriter, r *http.Request)

	// (POST /custom-data/remember)
	RememberCipherCustomData(w http.ResponseWriter, r *http.Request)

	// (POST /login-data/remember)
	RememberCipherLoginData(w http.ResponseWriter, r *http.Request)

	// (GET /secret)
	ShowSecret(w http.ResponseWriter, r *http.Request)

	// (GET /secrets)
	ShowUserSecrets(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /card-data/remember)
func (_ Unimplemented) RememberCipherCardData(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /custom-binary-data/remember)
func (_ Unimplemented) RememberCipherCustomBinaryData(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /custom-data/remember)
func (_ Unimplemented) RememberCipherCustomData(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /login-data/remember)
func (_ Unimplemented) RememberCipherLoginData(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /secret)
func (_ Unimplemented) ShowSecret(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /secrets)
func (_ Unimplemented) ShowUserSecrets(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// RememberCipherCardData operation middleware
func (siw *ServerInterfaceWrapper) RememberCipherCardData(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RememberCipherCardData(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RememberCipherCustomBinaryData operation middleware
func (siw *ServerInterfaceWrapper) RememberCipherCustomBinaryData(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RememberCipherCustomBinaryData(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RememberCipherCustomData operation middleware
func (siw *ServerInterfaceWrapper) RememberCipherCustomData(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RememberCipherCustomData(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RememberCipherLoginData operation middleware
func (siw *ServerInterfaceWrapper) RememberCipherLoginData(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RememberCipherLoginData(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowSecret operation middleware
func (siw *ServerInterfaceWrapper) ShowSecret(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowSecret(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowUserSecrets operation middleware
func (siw *ServerInterfaceWrapper) ShowUserSecrets(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowUserSecrets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/card-data/remember", wrapper.RememberCipherCardData)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/custom-binary-data/remember", wrapper.RememberCipherCustomBinaryData)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/custom-data/remember", wrapper.RememberCipherCustomData)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login-data/remember", wrapper.RememberCipherLoginData)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/secret", wrapper.ShowSecret)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/secrets", wrapper.ShowUserSecrets)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xX30/bPhD/Vyp/v9JeAul+POVtsN/a9jA2TROqkJtcG0Pi884OUKH+75PPaVOI2wID",
	"xHhLc5fz54ftu16IHGuDGrSzIrsQNi+hlvz4lgjJPxhCA+QU8OsarJVT8I9uZkBkwjpSeirmibBVM40E",
	"5okg+N0ogkJkhyErWRYaJYt8HB9D7nyhb1BDPQbaV6YE2pdUvJFO9sGMSeoiCiWXVHzAqgD6Kus42hyL",
	"eADOzRfUrlwX/AWSorEaAsheQDeezXZprqBOWoLLAivYOiQtk2vo2FiH9Z7SkmZxPU9gdjNip7JqYDsv",
	"X3eRfF2cjxnhZ5wqHQdY+dDNIBpp7RlSfCM3pLaj90lJu/RKvRiRA8gJXB930bKBc1mbitfCGo58LZH0",
	"YbU+dNknMDuaIB1t/Cq8WP1MNryX+7QbxXpMkGrpRBZeJNt0CEnBTGbUfrFeCduXwnYB5aDmh/8JJiIT",
	"/6XdfZm2l2XaSrrkJySRnPXvvbZsFEuJZ+uciW/5yP7tF/Z3MuQNKTc78GBDwT2QBPS6CTfcmH+9W+j8",
	"6ed3kYQ+4CuFaCd86ZwRc19Y6QkyLuXYyfdoyhMAAzQ4lU3l/HECsgq1yMTz3eHu0BNFA1oaJTLxkl/5",
	"3epKhpX622/Hu5ZSe9pYDLQsipdEOoX6YyGydR0iiALW7WHBquWoHWguII2pVM4l0mOLuut32wxesxjL",
	"UIDNSRkXeC6A24EnMyg6TMEoRw2wc9agtsGOF8NXfAAvFXJYoODyExbzrqiErh5B3mg4N5A7KAawyJkn",
	"Is35Mt4Zc9e4pTtX+86DuHR10c1ucfYgsHxCtv2FXw/s1LU9egLmcKO+nTfd5PEQ1nSrbXTGN/FndsC0",
	"Bsvp49/2yC678RQirqw07PsxYmWBCGqWabvAw7uDsxnK43HMbrTshwVazH33rpZ9vHKtDIYiO7w8Eh6O",
	"5iMfJj++cbShqh39bJamFyVap2UN89RPcv5fEyk5roKMi2A42i1HUWEuKx/yq4/mfwIAAP//wDrUm3cQ",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
